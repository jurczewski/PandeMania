{"version":3,"sources":["api/FirebaseAPI.js","FirebaseConfig.js","App.jsx","splashscreen/splashscreen.js","serviceWorkerRegistration.js","reportWebVitals.js","index.jsx"],"names":["db","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initialize","app","firebase","initializeApp","firestore","addFavoriteCountry","userId","countryCode","collection","doc","set","country","catch","error","console","getFavoriteCountry","get","then","exists","data","Login","React","lazy","Layout","Logout","RestrictedRoute","UserProvider","App","fallback","className","path","a","setTimeout","loaderWrapper","document","getElementById","addEventListener","style","display","opacity","splash","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","id","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f815342f.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport config from '../FirebaseConfig';\n\nlet db;\n\nexport const initialize = () => {\n\tconst app = firebase.initializeApp(config);\n\tdb = firebase.firestore(app);\n};\n\nexport const addFavoriteCountry = (userId, countryCode) => {\n\tdb.collection('users')\n\t\t.doc(userId)\n\t\t.set({\n\t\t\tcountry: countryCode,\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error writing document: ', error);\n\t\t});\n};\n\nexport const getFavoriteCountry = (userId) => {\n\tconst docRef = db.collection('users').doc(userId);\n\n\treturn docRef\n\t\t.get()\n\t\t.then((doc) => {\n\t\t\tif (doc.exists) {\n\t\t\t\treturn doc.data().country;\n\t\t\t}\n\t\t\treturn '';\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error getting data for user:', error);\n\t\t});\n};\n","const config = {\n\tapiKey: 'AIzaSyCGg--7lUP9qUJxPQUHmTyfkzZhW3AHsT8',\n\tauthDomain: 'pandemania-d9690.firebaseapp.com',\n\tprojectId: 'pandemania-d9690',\n\tstorageBucket: 'pandemania-d9690.appspot.com',\n\tmessagingSenderId: '404379003612',\n\tappId: '1:404379003612:web:4a1c9b3218bfdf46d0a219',\n};\n\nexport default config;\n","import React, { Suspense } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { initialize } from './api/FirebaseAPI';\nimport './App.css';\n\nconst Login = React.lazy(() => import('./components/Login/Login'));\nconst Layout = React.lazy(() => import('./components/Layout/Layout'));\nconst Logout = React.lazy(() => import('./components/Logout/Logout'));\nconst RestrictedRoute = React.lazy(() => import('./components/RestrictedRoute/RestrictedRoute'));\nconst UserProvider = React.lazy(() => import('./context/user/UserProvider'));\n\ninitialize();\n\nfunction App() {\n\treturn (\n\t\t<Suspense fallback={<></>}>\n\t\t\t<UserProvider>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<Router>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/login\">\n\t\t\t\t\t\t\t\t<Login />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<RestrictedRoute path=\"/logout\">\n\t\t\t\t\t\t\t\t<Logout />\n\t\t\t\t\t\t\t</RestrictedRoute>\n\t\t\t\t\t\t\t<Route path=\"*\">\n\t\t\t\t\t\t\t\t<Layout />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Router>\n\t\t\t\t</div>\n\t\t\t</UserProvider>\n\t\t</Suspense>\n\t);\n}\n\nexport default App;\n","async function splash() {\n\tsetTimeout(() => {\n\t\tconst loaderWrapper = document.getElementById('loader-wrapper');\n\t\tloaderWrapper.addEventListener(\n\t\t\t'transitionend',\n\t\t\t() => {\n\t\t\t\tloaderWrapper.style.display = 'none';\n\t\t\t},\n\t\t\ttrue,\n\t\t);\n\t\tloaderWrapper.style.opacity = 0.0;\n\t}, 1200);\n}\n\nexport default splash;\n","/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://cra.link/PWA',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://cra.link/PWA.',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","const reportWebVitals = (onPerfEntry) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","/* eslint-disable import/no-named-as-default */\n/* eslint-disable import/no-named-as-default-member */\n/* eslint-disable import/named */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './splashscreen/splashscreen.css';\nimport splash from './splashscreen/splashscreen';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<div id=\"loader-wrapper\">\n\t\t\t<div id=\"loader\" />\n\t\t</div>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n\tsplash,\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}