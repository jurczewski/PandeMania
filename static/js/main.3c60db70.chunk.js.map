{"version":3,"sources":["api/FetchDataForCountry.js","components/graphs/AreaDateTimeCountryData/AreaDateTimeCountryData.jsx","api/FetchAllCountries.js","components/CountryIcon/CountryIcon.jsx","components/CountryPicker/CountryPicker.jsx","components/Layout/Layout.jsx","App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.jsx"],"names":["dataForCountry","countryName","a","fetch","then","response","json","data","map","record","id","ID","country","Country","confirmed","Confirmed","recovered","Recovered","date","Date","parse","console","warn","initialState","series","getTime","options","chart","zoom","autoScaleYaxis","theme","mode","dataLabels","enabled","xaxis","type","tooltip","x","format","selection","timelineEnum","Object","freeze","ONE_MONTH","SIX_MONTH","ONE_YEAR","YTD","ALL","AreaDateTimeCountryData","useState","chartData","setChartData","fetchData","name","c","useEffect","buttons","value","label","color","ButtonGroup","className","button","Button","variant","onClick","timeline","daysToGoBack","dates","length","ApexCharts","exec","firstDay","getFullYear","updateData","height","defaultProps","allCountries","slug","Slug","ISO2","sizes","16","24","32","48","64","themes","FLAT","SHINY","CountryIcon","code","size","src","alt","darkTheme","createMuiTheme","palette","CountryPicker","countries","setCountries","fetchedCountries","sortedCountries","sort","b","localeCompare","ThemeProvider","Autocomplete","style","width","getOptionLabel","option","renderInput","params","TextField","margin","renderOption","inputValue","matches","match","parts","part","fontWeight","highlight","text","Layout","countryCode","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3c60db70.chunk.js","sourcesContent":["const apiUrl = 'https://api.covid19api.com/country/';\n\nconst dataForCountry = async (countryName) => {\n\ttry {\n\t\treturn fetch(`${apiUrl}${countryName}`)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) =>\n\t\t\t\tdata.map((record) => ({\n\t\t\t\t\tid: record.ID,\n\t\t\t\t\tcountry: record.Country,\n\t\t\t\t\tconfirmed: record.Confirmed,\n\t\t\t\t\trecovered: record.Recovered,\n\t\t\t\t\tdate: Date.parse(record.Date),\n\t\t\t\t})),\n\t\t\t);\n\t} catch (error) {\n\t\treturn console.warn(error);\n\t}\n};\n\nexport default dataForCountry;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport Chart from 'react-apexcharts';\nimport ApexCharts from 'apexcharts';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport dataForCountry from '../../../api/FetchDataForCountry';\nimport './AreaDateTimeCountryData.css';\n\nconst id = 'area-datetime';\n\nconst initialState = {\n\tseries: [\n\t\t{\n\t\t\tdata: [[new Date().getTime(), 0]],\n\t\t},\n\t],\n\toptions: {\n\t\tchart: {\n\t\t\tid,\n\t\t\tzoom: {\n\t\t\t\tautoScaleYaxis: true,\n\t\t\t},\n\t\t},\n\t\ttheme: {\n\t\t\tmode: 'dark',\n\t\t},\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t},\n\t\txaxis: {\n\t\t\ttype: 'datetime',\n\t\t},\n\t\ttooltip: {\n\t\t\tx: {\n\t\t\t\tformat: 'dd MMM yyyy',\n\t\t\t},\n\t\t},\n\t},\n\tselection: 'one_year',\n};\n\nconst timelineEnum = Object.freeze({\n\tONE_MONTH: 'one_month',\n\tSIX_MONTH: 'six_months',\n\tONE_YEAR: 'one_year',\n\tYTD: 'ytd',\n\tALL: 'all',\n});\n\nconst AreaDateTimeCountryData = ({ countryName }) => {\n\tconst [chartData, setChartData] = useState(initialState);\n\n\tconst updateData = (timeline) => {\n\t\tsetChartData({\n\t\t\t...chartData,\n\t\t\tselection: timeline,\n\t\t});\n\n\t\tconst dates = chartData.series[0].data;\n\t\tconst length = dates.length - 1;\n\t\tlet daysToGoBack;\n\n\t\tswitch (timeline) {\n\t\t\tcase timelineEnum.ONE_MONTH:\n\t\t\t\tdaysToGoBack = 31;\n\t\t\t\tApexCharts.exec(id, 'zoomX', dates[length - daysToGoBack][0], dates[length][0]);\n\t\t\t\tbreak;\n\t\t\tcase timelineEnum.SIX_MONTH:\n\t\t\t\tdaysToGoBack = 6 * 31;\n\t\t\t\tApexCharts.exec(id, 'zoomX', dates[length - daysToGoBack][0], dates[dates.length - 1][0]);\n\t\t\t\tbreak;\n\t\t\tcase timelineEnum.ONE_YEAR:\n\t\t\t\tdaysToGoBack = 365;\n\t\t\t\tApexCharts.exec(id, 'zoomX', dates[length - daysToGoBack][0], dates[length][0]);\n\t\t\t\tbreak;\n\t\t\tcase timelineEnum.YTD: {\n\t\t\t\tconst firstDay = new Date(new Date().getFullYear(), 0, 1);\n\t\t\t\tApexCharts.exec(id, 'zoomX', firstDay.getTime(), dates[length][0]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase timelineEnum.ALL:\n\t\t\t\tApexCharts.exec(id, 'zoomX', dates[0][0], dates[length][0]);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t};\n\n\tconst fetchData = async () => {\n\t\tconst response = await dataForCountry(countryName);\n\n\t\tlet series = [];\n\t\tif (typeof response !== 'undefined') {\n\t\t\tseries = [\n\t\t\t\t{\n\t\t\t\t\tname: 'Confirmed cases',\n\t\t\t\t\tdata: response.map((c) => [c.date, c.confirmed]),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Recovered cases',\n\t\t\t\t\tdata: response.map((c) => [c.date, c.recovered]),\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\n\t\tsetChartData({\n\t\t\t...chartData,\n\t\t\tseries,\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, []);\n\n\tconst buttons = [\n\t\t{\n\t\t\tvalue: timelineEnum.ONE_MONTH,\n\t\t\tlabel: '1M',\n\t\t},\n\t\t{\n\t\t\tvalue: timelineEnum.SIX_MONTH,\n\t\t\tlabel: '6M',\n\t\t},\n\t\t{\n\t\t\tvalue: timelineEnum.ONE_YEAR,\n\t\t\tlabel: '1Y',\n\t\t},\n\t\t{\n\t\t\tvalue: timelineEnum.YTD,\n\t\t\tlabel: 'YTD',\n\t\t},\n\t\t{\n\t\t\tvalue: timelineEnum.ALL,\n\t\t\tlabel: 'ALL',\n\t\t\tcolor: 'primary',\n\t\t},\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t<ButtonGroup className=\"toolbar\">\n\t\t\t\t{buttons.map((button) => (\n\t\t\t\t\t<Button\n\t\t\t\t\t\tkey={button.value}\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor={button.color}\n\t\t\t\t\t\tonClick={() => updateData(button.value)}\n\t\t\t\t\t\tclassName={chartData.selection === button.value ? 'active' : ''}\n\t\t\t\t\t>\n\t\t\t\t\t\t{button.label}\n\t\t\t\t\t</Button>\n\t\t\t\t))}\n\t\t\t</ButtonGroup>\n\n\t\t\t<div>\n\t\t\t\t<Chart options={chartData.options} series={chartData.series} type=\"area\" height={500} />\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nAreaDateTimeCountryData.propTypes = {\n\tcountryName: propTypes.string,\n};\n\nAreaDateTimeCountryData.defaultProps = {\n\tcountryName: 'poland',\n};\n\nexport default AreaDateTimeCountryData;\n","const apiUrl = 'https://api.covid19api.com/countries';\n\nconst allCountries = async () => {\n\ttry {\n\t\treturn fetch(apiUrl)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) =>\n\t\t\t\tdata.map((record) => ({\n\t\t\t\t\tcountry: record.Country,\n\t\t\t\t\tslug: record.Slug,\n\t\t\t\t\tISO2: record.ISO2,\n\t\t\t\t})),\n\t\t\t);\n\t} catch (error) {\n\t\treturn console.warn(error);\n\t}\n};\n\nexport default allCountries;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst sizes = Object.freeze({\n\t16: 16,\n\t24: 24,\n\t32: 32,\n\t48: 48,\n\t64: 64,\n});\n\nconst themes = Object.freeze({\n\tFLAT: 'flat',\n\tSHINY: 'shiny',\n});\n\nconst CountryIcon = ({ code, size, name, theme }) => {\n\treturn <img src={`https://www.countryflags.io/${code}/${theme}/${size}.png`} alt={name} />;\n};\n\nexport default CountryIcon;\n\nCountryIcon.propTypes = {\n\tcode: propTypes.string,\n\tsize: sizes,\n\tname: propTypes.string,\n\ttheme: propTypes.string,\n};\n\nCountryIcon.defaultProps = {\n\tcode: 'PL',\n\tsize: sizes[16],\n\tname: 'Poland',\n\ttheme: themes.FLAT,\n};\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\nimport allCountries from '../../api/FetchAllCountries';\nimport CountryIcon from '../CountryIcon/CountryIcon';\nimport './CountryPicker.css';\n\nconst darkTheme = createMuiTheme({\n\tpalette: {\n\t\ttype: 'dark',\n\t},\n});\n\nconst CountryPicker = () => {\n\tconst [countries, setCountries] = useState([]);\n\n\tconst fetchData = async () => {\n\t\tconst response = await allCountries();\n\t\tconst fetchedCountries = response.map((c) => c);\n\t\tconst sortedCountries = fetchedCountries.sort((a, b) => a.country.localeCompare(b.country));\n\t\tsetCountries(sortedCountries);\n\t};\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, []);\n\n\treturn (\n\t\t<ThemeProvider theme={darkTheme}>\n\t\t\t<Autocomplete\n\t\t\t\tid=\"highlights-demo\"\n\t\t\t\ttheme={darkTheme}\n\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\toptions={countries}\n\t\t\t\tgetOptionLabel={(option) => option.country}\n\t\t\t\trenderInput={(params) => <TextField {...params} label=\"Countries\" variant=\"outlined\" margin=\"normal\" />}\n\t\t\t\trenderOption={(option, { inputValue }) => {\n\t\t\t\t\tconst matches = match(option.country, inputValue);\n\t\t\t\t\tconst parts = parse(option.country, matches);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<CountryIcon code={option.ISO2} name={option.country} />\n\t\t\t\t\t\t\t{parts.map((part) => (\n\t\t\t\t\t\t\t\t<span key={part.text} style={{ fontWeight: part.highlight ? 700 : 400 }}>\n\t\t\t\t\t\t\t\t\t{part.text}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t/>\n\t\t</ThemeProvider>\n\t);\n};\n\nexport default CountryPicker;\n","import React from 'react';\nimport './Layout.css';\nimport AreaDateTimeCountryData from '../graphs/AreaDateTimeCountryData/AreaDateTimeCountryData';\nimport CountryPicker from '../CountryPicker/CountryPicker';\n\nconst Layout = () => {\n\tconst countryCode = 'Poland';\n\treturn (\n\t\t<>\n\t\t\t<header>\n\t\t\t\t<h1>PandeMania</h1>\n\t\t\t</header>\n\t\t\t<main>\n\t\t\t\t<p className=\"title\">\n\t\t\t\t\tCases and recoveries for whole country: <span className=\"bold\">{countryCode}</span>\n\t\t\t\t</p>\n\t\t\t\t<AreaDateTimeCountryData countryName={countryCode} />\n\t\t\t\t<CountryPicker />\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default Layout;\n","import React from 'react';\nimport Layout from './components/Layout/Layout';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Layout />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://cra.link/PWA',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://cra.link/PWA.',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","const reportWebVitals = (onPerfEntry) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","/* eslint-disable import/no-named-as-default */\n/* eslint-disable import/no-named-as-default-member */\n/* eslint-disable import/named */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}