{"version":3,"sources":["api/FetchDataForCountry.js","components/ChartWrapper/ChartWrapper.jsx","api/FetchAllCountries.js","components/CountryPicker/CountryPicker.jsx","components/FavoriteIcon/FavoriteIcon.jsx","components/TableWrapper/TableWrapper.jsx","components/Layout/Layout.jsx","context/user/UserContext.js","components/CountryIcon/CountryIcon.jsx"],"names":["dataForCountry","countryName","a","fetch","then","response","ok","json","data","map","record","id","ID","country","Country","confirmed","Confirmed","recovered","Recovered","deaths","Deaths","active","Active","date","Date","parse","catch","error","console","warn","timelineEnum","Object","freeze","ONE_MONTH","SIX_MONTH","ONE_YEAR","YTD","ALL","initialState","series","getTime","options","chart","zoom","autoScaleYaxis","theme","mode","dataLabels","enabled","xaxis","type","tooltip","x","format","selection","ChartWrapper","useState","chartData","setChartData","useEffect","fetchData","name","c","buttons","value","label","ButtonGroup","className","button","Button","variant","color","onClick","timeline","daysToGoBack","dates","length","ApexCharts","exec","firstDay","getFullYear","updateData","height","defaultProps","allCountries","slug","Slug","ISO2","getCountryInfo","code","countries","find","darkTheme","createMuiTheme","palette","CountryPicker","setPickedCountry","setCountries","fetchedCountries","sortedCountries","sort","b","localeCompare","ThemeProvider","Autocomplete","style","width","getOptionLabel","option","onChange","_","handleCountrySelection","renderInput","params","TextField","margin","renderOption","inputValue","matches","match","parts","CountryIcon","part","fontWeight","highlight","text","iconStyle","fontSize","FavoriteIconWrapper","isSet","createData","number","TableWrapper","rows","setRows","today","marginBottom","TableContainer","component","Paper","Table","aria-label","TableBody","row","TableRow","TableCell","scope","align","Layout","useContext","UserContext","userCountry","user","setUser","fetched","pickedCountry","size","uid","addFavoriteCountry","React","createContext","sizes","16","24","32","48","64","themes","FLAT","SHINY","imgStyle","src","alt"],"mappings":"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","file":"static/js/7.eb96a8f5.chunk.js","sourcesContent":["const apiUrl = 'https://api.covid19api.com/country/';\n\nconst dataForCountry = async (countryName) => {\n\treturn fetch(`${apiUrl}${countryName}`)\n\t\t.then((response) => {\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\treturn [];\n\t\t})\n\t\t.then((data) =>\n\t\t\tdata.map((record) => ({\n\t\t\t\tid: record.ID,\n\t\t\t\tcountry: record.Country,\n\t\t\t\tconfirmed: record.Confirmed,\n\t\t\t\trecovered: record.Recovered,\n\t\t\t\tdeaths: record.Deaths,\n\t\t\t\tactive: record.Active,\n\t\t\t\tdate: Date.parse(record.Date),\n\t\t\t})),\n\t\t)\n\t\t.catch((error) => {\n\t\t\tconsole.warn(error);\n\t\t\treturn [];\n\t\t});\n};\n\nexport default dataForCountry;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport Chart from 'react-apexcharts';\nimport ApexCharts from 'apexcharts';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport dataForCountry from '../../api/FetchDataForCountry';\nimport './ChartWrapper.css';\n\nconst id = 'area-datetime';\n\nconst timelineEnum = Object.freeze({\n\tONE_MONTH: 'one_month',\n\tSIX_MONTH: 'six_months',\n\tONE_YEAR: 'one_year',\n\tYTD: 'ytd',\n\tALL: 'all',\n});\n\nconst initialState = {\n\tseries: [\n\t\t{\n\t\t\tdata: [[new Date().getTime(), 0]],\n\t\t},\n\t],\n\toptions: {\n\t\tchart: {\n\t\t\tid,\n\t\t\tzoom: {\n\t\t\t\tautoScaleYaxis: true,\n\t\t\t},\n\t\t},\n\t\ttheme: {\n\t\t\tmode: 'dark',\n\t\t},\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t},\n\t\txaxis: {\n\t\t\ttype: 'datetime',\n\t\t},\n\t\ttooltip: {\n\t\t\tx: {\n\t\t\t\tformat: 'dd MMM yyyy',\n\t\t\t},\n\t\t},\n\t},\n\tselection: timelineEnum.ALL,\n};\n\nconst ChartWrapper = ({ countryName }) => {\n\tconst [chartData, setChartData] = useState(initialState);\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, [countryName]);\n\n\tconst updateData = (timeline) => {\n\t\tconst dates = chartData.series[0].data;\n\t\tconst length = dates.length - 1;\n\t\tlet daysToGoBack;\n\n\t\tif (length === -1) return;\n\n\t\tsetChartData({\n\t\t\t...chartData,\n\t\t\tselection: timeline,\n\t\t});\n\n\t\tswitch (timeline) {\n\t\t\tcase timelineEnum.ONE_MONTH:\n\t\t\t\tdaysToGoBack = 31;\n\t\t\t\tApexCharts.exec(id, 'zoomX', dates[length - daysToGoBack][0], dates[length][0]);\n\t\t\t\tbreak;\n\t\t\tcase timelineEnum.SIX_MONTH:\n\t\t\t\tdaysToGoBack = 6 * 31;\n\t\t\t\tApexCharts.exec(id, 'zoomX', dates[length - daysToGoBack][0], dates[dates.length - 1][0]);\n\t\t\t\tbreak;\n\t\t\tcase timelineEnum.ONE_YEAR:\n\t\t\t\tdaysToGoBack = 365;\n\t\t\t\tApexCharts.exec(id, 'zoomX', dates[length - daysToGoBack][0], dates[length][0]);\n\t\t\t\tbreak;\n\t\t\tcase timelineEnum.YTD: {\n\t\t\t\tconst firstDay = new Date(new Date().getFullYear(), 0, 1);\n\t\t\t\tApexCharts.exec(id, 'zoomX', firstDay.getTime(), dates[length][0]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase timelineEnum.ALL:\n\t\t\t\tApexCharts.exec(id, 'zoomX', dates[0][0], dates[length][0]);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t};\n\n\tconst fetchData = async () => {\n\t\tconst response = await dataForCountry(countryName);\n\n\t\tlet series = [];\n\t\tif (typeof response !== 'undefined') {\n\t\t\tseries = [\n\t\t\t\t{\n\t\t\t\t\tname: 'Confirmed cases',\n\t\t\t\t\tdata: response.map((c) => [c.date, c.confirmed]),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Recovered cases',\n\t\t\t\t\tdata: response.map((c) => [c.date, c.recovered]),\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tsetChartData({\n\t\t\t\t...chartData,\n\t\t\t\tseries,\n\t\t\t});\n\t\t}\n\t};\n\n\tconst buttons = [\n\t\t{\n\t\t\tvalue: timelineEnum.ONE_MONTH,\n\t\t\tlabel: '1M',\n\t\t},\n\t\t{\n\t\t\tvalue: timelineEnum.SIX_MONTH,\n\t\t\tlabel: '6M',\n\t\t},\n\t\t{\n\t\t\tvalue: timelineEnum.ONE_YEAR,\n\t\t\tlabel: '1Y',\n\t\t},\n\t\t{\n\t\t\tvalue: timelineEnum.YTD,\n\t\t\tlabel: 'YTD',\n\t\t},\n\t\t{\n\t\t\tvalue: timelineEnum.ALL,\n\t\t\tlabel: 'ALL',\n\t\t},\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t<ButtonGroup className=\"toolbar\">\n\t\t\t\t{buttons.map((button) => (\n\t\t\t\t\t<Button\n\t\t\t\t\t\tkey={button.value}\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor={chartData.selection === button.value ? 'primary' : ''}\n\t\t\t\t\t\tonClick={() => updateData(button.value)}\n\t\t\t\t\t\tclassName={chartData.selection === button.value ? 'active' : ''}\n\t\t\t\t\t>\n\t\t\t\t\t\t{button.label}\n\t\t\t\t\t</Button>\n\t\t\t\t))}\n\t\t\t</ButtonGroup>\n\n\t\t\t<div className=\"chart-wrapper\">\n\t\t\t\t{chartData.series[0].data.length === 0 && <h2 className=\"chart-wrapper__header\">No data</h2>}\n\t\t\t\t<Chart options={chartData.options} series={chartData.series} type=\"area\" height={500} />\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nChartWrapper.propTypes = {\n\tcountryName: propTypes.string,\n};\n\nChartWrapper.defaultProps = {\n\tcountryName: null,\n};\n\nexport default ChartWrapper;\n","const apiUrl = 'https://api.covid19api.com/countries';\n\nexport const allCountries = async () => {\n\treturn fetch(apiUrl)\n\t\t.then((response) => {\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\treturn [];\n\t\t})\n\t\t.then((data) =>\n\t\t\tdata.map((record) => ({\n\t\t\t\tcountry: record.Country,\n\t\t\t\tslug: record.Slug,\n\t\t\t\tISO2: record.ISO2,\n\t\t\t})),\n\t\t)\n\t\t.catch((error) => {\n\t\t\tconsole.warn(error);\n\t\t\treturn [];\n\t\t});\n};\n\nexport const getCountryInfo = async (code) => {\n\tconst countries = await allCountries();\n\treturn countries.find((c) => c.ISO2 === code);\n};\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\nimport { allCountries } from '../../api/FetchAllCountries';\nimport CountryIcon from '../CountryIcon/CountryIcon';\nimport './CountryPicker.css';\n\nconst darkTheme = createMuiTheme({\n\tpalette: {\n\t\ttype: 'dark',\n\t},\n});\n\nconst CountryPicker = ({ setPickedCountry }) => {\n\tconst [countries, setCountries] = useState([]);\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, []);\n\n\tconst fetchData = async () => {\n\t\tconst fetchedCountries = await allCountries();\n\t\tconst sortedCountries = fetchedCountries.sort((a, b) => a.country.localeCompare(b.country));\n\t\tsetCountries(sortedCountries);\n\t};\n\n\tconst handleCountrySelection = (value) => {\n\t\tif (value) {\n\t\t\tsetPickedCountry(value);\n\t\t}\n\t};\n\n\treturn (\n\t\t<ThemeProvider theme={darkTheme}>\n\t\t\t<Autocomplete\n\t\t\t\tid=\"highlights-demo\"\n\t\t\t\ttheme={darkTheme}\n\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\toptions={countries}\n\t\t\t\tgetOptionLabel={(option) => option.country}\n\t\t\t\tonChange={(_, value) => handleCountrySelection(value)}\n\t\t\t\trenderInput={(params) => <TextField {...params} label=\"Countries\" variant=\"outlined\" margin=\"normal\" />}\n\t\t\t\trenderOption={(option, { inputValue }) => {\n\t\t\t\t\tconst matches = match(option.country, inputValue);\n\t\t\t\t\tconst parts = parse(option.country, matches);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<CountryIcon code={option.ISO2} name={option.country} />\n\t\t\t\t\t\t\t{parts.map((part) => (\n\t\t\t\t\t\t\t\t<span key={part.text} style={{ fontWeight: part.highlight ? 700 : 400 }}>\n\t\t\t\t\t\t\t\t\t{part.text}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t/>\n\t\t</ThemeProvider>\n\t);\n};\n\nCountryPicker.propTypes = {\n\tsetPickedCountry: propTypes.func.isRequired,\n};\n\nexport default CountryPicker;\n","import React from 'react';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport PropTypes from 'prop-types';\nimport './FavoriteIcon.css';\n\nconst iconStyle = {\n\tfontSize: '2rem',\n};\n\nconst FavoriteIconWrapper = ({ isSet, onClick }) => {\n\treturn (\n\t\t<div className=\"wrapper\">\n\t\t\t{isSet ? (\n\t\t\t\t<FavoriteIcon onClick={onClick} className=\"icon\" style={iconStyle} />\n\t\t\t) : (\n\t\t\t\t<FavoriteBorderIcon onClick={onClick} className=\"icon\" style={iconStyle} />\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nFavoriteIconWrapper.propTypes = {\n\tisSet: PropTypes.bool,\n\tonClick: PropTypes.func.isRequired,\n};\n\nFavoriteIconWrapper.defaultProps = {\n\tisSet: false,\n};\n\nexport default FavoriteIconWrapper;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport dataForCountry from '../../api/FetchDataForCountry';\n\nconst darkTheme = createMuiTheme({\n\tpalette: {\n\t\ttype: 'dark',\n\t},\n});\n\nconst initialState = [\n\tcreateData('Confirmed', 0),\n\tcreateData('Deaths', 0),\n\tcreateData('Recovered', 0),\n\tcreateData('Active', 0),\n];\n\nfunction createData(name, number) {\n\treturn { name, number };\n}\n\nconst TableWrapper = ({ countryName }) => {\n\tconst [rows, setRows] = useState(initialState);\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, [countryName]);\n\n\tconst fetchData = async () => {\n\t\tconst response = await dataForCountry(countryName);\n\n\t\tif (response.length !== 0) {\n\t\t\tconst today = response[response.length - 1];\n\n\t\t\tsetRows([\n\t\t\t\tcreateData('Confirmed', today.confirmed),\n\t\t\t\tcreateData('Deaths', today.deaths),\n\t\t\t\tcreateData('Recovered', today.recovered),\n\t\t\t\tcreateData('Active', today.active),\n\t\t\t]);\n\t\t} else {\n\t\t\tsetRows(initialState);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div style={{ marginBottom: '1rem' }}>\n\t\t\t<ThemeProvider theme={darkTheme}>\n\t\t\t\t<TableContainer component={Paper}>\n\t\t\t\t\t<Table aria-label=\"country statistic\">\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{rows.map((row) => (\n\t\t\t\t\t\t\t\t<TableRow key={row.name}>\n\t\t\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\" style={{ fontWeight: 'bold' }}>\n\t\t\t\t\t\t\t\t\t\t{row.name}\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"right\">{row.number}</TableCell>\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t</ThemeProvider>\n\t\t</div>\n\t);\n};\n\nTableWrapper.propTypes = {\n\tcountryName: propTypes.string,\n};\n\nTableWrapper.defaultProps = {\n\tcountryName: null,\n};\n\nexport default TableWrapper;\n","import React, { useContext, useEffect, useState } from 'react';\nimport './Layout.css';\nimport AreaDateTimeCountryData from '../ChartWrapper/ChartWrapper';\nimport CountryPicker from '../CountryPicker/CountryPicker';\nimport CountryIcon from '../CountryIcon/CountryIcon';\nimport FavoriteIconWrapper from '../FavoriteIcon/FavoriteIcon';\nimport UserContext from '../../context/user/UserContext';\nimport { addFavoriteCountry } from '../../api/FirebaseAPI';\nimport { getCountryInfo } from '../../api/FetchAllCountries';\nimport TableWrapper from '../TableWrapper/TableWrapper';\n\nconst initialState = {\n\tslug: null,\n\tcountry: null,\n\tISO2: null,\n};\n\nconst Layout = () => {\n\tconst { country: userCountry, user, setUser, fetched } = useContext(UserContext);\n\tconst [pickedCountry, setPickedCountry] = useState(initialState);\n\n\tuseEffect(() => {\n\t\tif (typeof userCountry !== 'undefined' && userCountry !== '') {\n\t\t\tgetCountryInfo(userCountry).then((country) => {\n\t\t\t\tif (country) {\n\t\t\t\t\tsetPickedCountry(country);\n\t\t\t\t} else {\n\t\t\t\t\tsetPickedCountry(initialState);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, [userCountry]);\n\n\tconst handleSetFavoriteCountry = () => {\n\t\tconst id = user.uid;\n\t\taddFavoriteCountry(id, pickedCountry.ISO2);\n\t\tsetUser({ user, fetched, country: pickedCountry.ISO2 });\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<main>\n\t\t\t\t<p className=\"title\">\n\t\t\t\t\tCases and recoveries for whole country:\n\t\t\t\t\t{pickedCountry.country ? (\n\t\t\t\t\t\t<span className=\"bold\"> {pickedCountry.country}</span>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<span>No country set</span>\n\t\t\t\t\t)}\n\t\t\t\t\t<CountryIcon code={pickedCountry.ISO2} size={24} name={pickedCountry.country} />\n\t\t\t\t</p>\n\t\t\t\t<div className=\"picker\">\n\t\t\t\t\t<CountryPicker setPickedCountry={(value) => setPickedCountry(value)} />\n\t\t\t\t\t{user && (\n\t\t\t\t\t\t<FavoriteIconWrapper\n\t\t\t\t\t\t\tonClick={handleSetFavoriteCountry}\n\t\t\t\t\t\t\tisSet={pickedCountry.ISO2 === userCountry}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<AreaDateTimeCountryData countryName={pickedCountry.slug} />\n\t\t\t\t<TableWrapper countryName={pickedCountry.slug} />\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default Layout;\n","import React from 'react';\n\nexport const initialState = {\n\tuser: null,\n\tfetched: false,\n\tcountry: '',\n\n\tsetUser: () => {},\n};\n\nconst UserContext = React.createContext(initialState);\n\nexport default UserContext;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst sizes = Object.freeze({\n\t16: 16,\n\t24: 24,\n\t32: 32,\n\t48: 48,\n\t64: 64,\n});\n\nconst themes = Object.freeze({\n\tFLAT: 'flat',\n\tSHINY: 'shiny',\n});\n\nconst CountryIcon = ({ code, size, name, theme }) => {\n\tconst isCountrySet = () => {\n\t\treturn code && size && name && theme;\n\t};\n\n\tconst imgStyle = {\n\t\twidth: size,\n\t\theight: size,\n\t};\n\treturn isCountrySet() ? (\n\t\t<img src={`https://www.countryflags.io/${code}/${theme}/24.png`} alt={name} style={imgStyle} />\n\t) : null;\n};\n\nexport default CountryIcon;\n\nCountryIcon.propTypes = {\n\tcode: propTypes.string,\n\tsize: propTypes.oneOf([16, 24, 32, 48, 64]),\n\tname: propTypes.string,\n\ttheme: propTypes.string,\n};\n\nCountryIcon.defaultProps = {\n\tcode: 'PL',\n\tsize: sizes[16],\n\tname: 'Poland',\n\ttheme: themes.FLAT,\n};\n"],"sourceRoot":""}