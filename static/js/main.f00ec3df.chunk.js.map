{"version":3,"sources":["api/FetchDataForCountry.js","components/AreaCountryData/AreaCountryData.jsx","components/Layout/Layout.jsx","App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.jsx","components/Layout/Layout.module.css"],"names":["dataForCountry","countryName","a","fetch","response","json","data","result","map","record","country","Country","id","ID","confirmed","Confirmed","recovered","Recovered","date","Date","parse","console","warn","initialState","options","chart","xaxis","categories","dataLabels","enabled","stroke","curve","series","name","AreaCountryData","useState","chartData","setChartData","fetchData","c","toLocaleDateString","useEffect","type","height","Layout","className","classes","title","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","module","exports"],"mappings":"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","file":"static/js/main.f00ec3df.chunk.js","sourcesContent":["const apiUrl = 'https://api.covid19api.com/country/';\n\nconst dataForCountry = async (countryName) => {\n\ttry {\n\t\tconst response = await fetch(`${apiUrl}${countryName}`);\n\t\tconst data = await response.json();\n\t\tconst result = data.map((record) => ({\n\t\t\tcountry: record.Country,\n\t\t\tid: record.ID,\n\t\t\tconfirmed: record.Confirmed,\n\t\t\trecovered: record.Recovered,\n\t\t\tdate: Date.parse(record.Date),\n\t\t}));\n\t\treturn result;\n\t} catch (error) {\n\t\treturn console.warn(error);\n\t}\n};\n\nexport default dataForCountry;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport dataForCountry from '../../api/FetchDataForCountry';\n\nconst initialState = {\n\toptions: {\n\t\tchart: {\n\t\t\tid: 'countryData',\n\t\t},\n\t\txaxis: {\n\t\t\tcategories: [0],\n\t\t},\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t},\n\t\tstroke: {\n\t\t\tcurve: 'smooth',\n\t\t},\n\t},\n\tseries: [\n\t\t{\n\t\t\tname: 'Confirmed cases',\n\t\t\tdata: [0, 0],\n\t\t},\n\t\t{\n\t\t\tname: 'Recovered cases',\n\t\t\tdata: [0, 0],\n\t\t},\n\t],\n};\n\nconst AreaCountryData = ({ countryName }) => {\n\tconst [chartData, setChartData] = useState(initialState);\n\n\tconst fetchData = async () => {\n\t\tconst response = await dataForCountry(countryName);\n\n\t\tconst series = [\n\t\t\t{\n\t\t\t\tname: 'Confirmed cases',\n\t\t\t\tdata: response.map((c) => c.confirmed),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Recovered cases',\n\t\t\t\tdata: response.map((c) => c.recovered),\n\t\t\t},\n\t\t];\n\n\t\tsetChartData({\n\t\t\t...chartData,\n\t\t\tseries,\n\t\t\toptions: {\n\t\t\t\t...chartData.options,\n\t\t\t\txaxis: {\n\t\t\t\t\tcategories: response.map((c) => new Date(c.date).toLocaleDateString()),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, []);\n\n\treturn <Chart options={chartData.options} series={chartData.series} type=\"area\" height={500} />;\n};\n\nexport default AreaCountryData;\n","import React from 'react';\nimport classes from './Layout.module.css';\nimport AreaCountryData from '../AreaCountryData/AreaCountryData';\n\nconst Layout = () => {\n\treturn (\n\t\t<>\n\t\t\t<header>\n\t\t\t\t<h1>PandeMania</h1>\n\t\t\t</header>\n\t\t\t<main>\n\t\t\t\t<p className={classes.title}>Cases and recoveries for whole country</p>\n\t\t\t\t<AreaCountryData countryName=\"Poland\" />\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default Layout;\n","import React from 'react';\nimport Layout from './components/Layout/Layout';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Layout />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://cra.link/PWA',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://cra.link/PWA.',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","const reportWebVitals = (onPerfEntry) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","/* eslint-disable import/no-named-as-default */\n/* eslint-disable import/no-named-as-default-member */\n/* eslint-disable import/named */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Layout_title__2Nztc\"};"],"sourceRoot":""}